

---------------------------------

import React, { useState, useEffect, useRef } from 'react';
import { Box, Typography, Card, CardContent, CircularProgress, Snackbar, Alert, useMediaQuery, useTheme, IconButton, Chip, Stack } from '@mui/material';
import { motion, useMotionValue, useTransform, PanInfo } from 'framer-motion';
import RefreshIcon from '@mui/icons-material/Refresh';
import { getCareerRecommendations, saveCareer } from '@/services/api';

interface CareerRecommendation {
  id: number;
  title: string;
  description: string;
  score: number;
  oasis_code?: string;
  main_duties?: string;
  metadata?: any;
}

const FindYourWay: React.FC = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [careers, setCareers] = useState<CareerRecommendation[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success' as 'success' | 'error',
  });

  const x = useMotionValue(0);
  const rotate = useTransform(x, [-200, 200], [-10, 10]);
  const cardOpacity = useTransform(x, [-200, 0, 200], [0.5, 1, 0.5]);
  const dragConstraints = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchCareerRecommendations();
  }, []);

  const fetchCareerRecommendations = async () => {
    try {
      setLoading(true);
      const data = await getCareerRecommendations(30); // Fetch 30 recommendations
      setCareers(data as CareerRecommendation[]);
      setCurrentIndex(0);
      setError(null);
      console.log('Career recommendations:', data);
    } catch (err) {
      setError('Failed to load career recommendations. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleDragEnd = async (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
    const swipeThreshold = 100;
    const career = careers[currentIndex];
    
    if (!career) return;

    if (info.offset.x > swipeThreshold) {
      await handleSwipeRight(career);
    } else if (info.offset.x < -swipeThreshold) {
      handleSwipeLeft();
    } else {
      x.set(0);
    }
  };

  const handleSwipeRight = async (career: CareerRecommendation) => {
    try {
      await saveCareer(career.id);
      setSnackbar({ open: true, message: `Saved "${career.title}" to your space!`, severity: 'success' });
      x.set(0);
      setCurrentIndex(prev => prev + 1);
    } catch (err) {
      setSnackbar({ open: true, message: 'Failed to save career. Please try again.', severity: 'error' });
      console.error(err);
      x.set(0);
    }
  };

  const handleSwipeLeft = () => {
    x.set(0);
    setCurrentIndex(prev => prev + 1);
  };

  const currentCareer = careers[currentIndex];
  const hasMoreCareers = currentIndex < careers.length;
  
  // Extract skills from metadata if available
  const getSkills = (career: CareerRecommendation) => {
    if (!career.metadata) return [];
    
    const skills = [];
    // Extract skills from metadata - common fields that might contain skills
    const fields = ['skills', 'required_skills', 'competencies', 'technology_skills'];
    
    for (const field of fields) {
      if (career.metadata[field]) {
        const fieldSkills = career.metadata[field].split('|').map((s: string) => s.trim());
        skills.push(...fieldSkills);
      }
    }
    
    return skills.slice(0, 5); // Limit to 5 skills
  };

  return (
    <Box sx={{ width: '100%', p: 2, display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: '"Times New Roman", serif' }}>
      <Typography variant="h4" component="h1" align="center" sx={{ mb: 6, fontWeight: 'bold', letterSpacing: 1, fontFamily: '"Times New Roman", serif' }}>
        Swipe Your Way
      </Typography>

      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 8 }}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Box sx={{ textAlign: 'center', my: 4 }}>
          <Typography color="error" sx={{ fontFamily: '"inter", sans-serif' }}>{error}</Typography>
          <IconButton onClick={fetchCareerRecommendations} color="primary">
            <RefreshIcon />
          </IconButton>
        </Box>
      ) : !hasMoreCareers ? (
        <Box sx={{ textAlign: 'center', my: 4 }}>
          <Typography variant="h6" gutterBottom sx={{ fontFamily: '"inter", sans-serif' }}>
            No more career suggestions
          </Typography>
          <Typography paragraph color="textSecondary" sx={{ fontFamily: '"inter", sans-serif' }}>
            Check back later or refresh to see if we have new recommendations for you.
          </Typography>
          <IconButton onClick={fetchCareerRecommendations} color="primary">
            <RefreshIcon />
          </IconButton>
        </Box>
      ) : (
        <>
          <Box ref={dragConstraints} sx={{ 
            width: isMobile ? '100%' : '500px', 
            height: isMobile ? '400px' : '500px',
            position: 'relative',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            mb: 2
          }}>
            <motion.div
              style={{
                x,
                rotate,
                opacity: cardOpacity,
                width: '100%',
                height: '100%',
                position: 'absolute',
                zIndex: 1,
                borderRadius: 20,
              }}
              drag="x"
              dragConstraints={dragConstraints}
              onDragEnd={handleDragEnd}
              whileTap={{ scale: 0.95, cursor: 'grabbing' }}
              whileDrag={{ rotate: 10 }}
              transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            >
              <Card sx={{ 
                width: '100%', 
                height: '100%', 
                display: 'flex', 
                flexDirection: 'column',
                borderRadius: 4,
                bgcolor: 'rgba(255,255,255,0.15)',
                backdropFilter: 'blur(12px)',
                boxShadow: '0 8px 32px rgba(0,0,0,0.2)',
                border: '1px solid rgba(255,255,255,0.2)',
                position: 'relative',
                overflow: 'hidden',
              }}>
                <CardContent sx={{ flex: 1, p: 3, display: 'flex', flexDirection: 'column' }}>
                  <Typography variant="h5" component="h2" gutterBottom sx={{ fontWeight: 600, mb: 2, fontFamily: '"inter", sans-serif' }}>
                    {currentCareer.title}
                  </Typography>
                  <Typography variant="body2" sx={{ flex: 1, overflow: 'auto', mb: 2, color: 'text.secondary', lineHeight: 1.6, fontFamily: '"inter", sans-serif' }}>
                    {currentCareer.description}
                  </Typography>
                  
                  {/* Display main duties if available */}
                  {currentCareer.main_duties && (
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1, fontFamily: '"inter", sans-serif' }}>
                        Main Duties:
                      </Typography>
                      <Typography variant="body2" sx={{ color: 'text.secondary', fontFamily: '"inter", sans-serif' }}>
                        {currentCareer.main_duties}
                      </Typography>
                    </Box>
                  )}
                  
                  {/* Display skills chips if available */}
                  {currentCareer.metadata && (
                    <Stack direction="row" spacing={1} sx={{ flexWrap: 'wrap', gap: 1, mb: 2 }}>
                      {getSkills(currentCareer).map((skill, index) => (
                        <Chip 
                          key={index} 
                          label={skill} 
                          size="small" 
                          sx={{ 
                            bgcolor: 'rgba(25,118,210,0.08)', 
                            color: 'primary.main',
                            fontFamily: '"inter", sans-serif'
                          }} 
                        />
                      ))}
                    </Stack>
                  )}
                  
                  <Box sx={{ 
                    position: 'absolute', 
                    bottom: 24, 
                    left: 24, 
                    right: 24, 
                    display: 'flex', 
                    justifyContent: 'center', 
                    alignItems: 'center',
                    pointerEvents: 'none'
                  }}>
                    <Typography 
                      variant="caption" 
                      sx={{ 
                        fontWeight: 'bold', 
                        color: 'text.secondary', 
                        letterSpacing: 1.2, 
                        fontSize: '0.85rem',
                        textTransform: 'uppercase',
                        fontFamily: '"inter", sans-serif'
                      }}
                    >
                      Swipe to Explore
                    </Typography>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Box>

          <Typography variant="body2" sx={{ mt: 4, textAlign: 'center', color: 'text.secondary', fontFamily: '"inter", sans-serif' }}>
            {currentIndex + 1} of {careers.length} recommendations
          </Typography>
        </>
      )}

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity} onClose={() => setSnackbar({ ...snackbar, open: false })} sx={{ fontFamily: '"inter", sans-serif' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default FindYourWay;

