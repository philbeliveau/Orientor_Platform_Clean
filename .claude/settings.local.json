{
  "permissions": {
    "allow": [
      "mcp__ruv-swarm",
      "mcp__claude-flow",
      "Bash(python:*)",
      "Bash(npm run build:*)",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''Health check result: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''‚úÖ Health check result: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''‚úÖ Health check result: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git rm:*)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(git reset:*)",
      "Bash(ls:*)",
      "Bash(npm run build:*)",
      "Bash(PORT=3000 npm run dev)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(pkill:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_close",
      "Bash(curl:*)",
      "Bash(rm:*)",
      "mcp__serena__search_for_pattern",
      "mcp__serena__write_memory",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__serena__list_dir",
      "mcp__serena__find_file",
      "mcp__serena__find_symbol",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__replace_regex",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\ntry:\n    from app.utils.security_validation import validate_production_security\n    result = validate_production_security()\n    print(''üîç Security Validation Results:'')\n    print(f''‚úÖ Deployment Safe: {result[\"\"deployment_safe\"\"]}'')\n    print(f''üìä Total Issues: {result[\"\"total_issues\"\"]}'')\n    print(f''üö® Critical: {len(result[\"\"issues\"\"][\"\"critical\"\"])}'')\n    print(f''‚ö†Ô∏è High: {len(result[\"\"issues\"\"][\"\"high\"\"])}'')\n    print(f''üí° Medium: {len(result[\"\"issues\"\"][\"\"medium\"\"])}'')\n    print(f''‚ÑπÔ∏è Low: {len(result[\"\"issues\"\"][\"\"low\"\"])}'')\n    if result[''issues''][''critical'']:\n        print(''\\nüö® CRITICAL ISSUES:'')\n        for issue in result[''issues''][''critical'']:\n            print(f''  - {issue}'')\n    if result[''issues''][''high'']:\n        print(''\\n‚ö†Ô∏è HIGH PRIORITY ISSUES:'')\n        for issue in result[''issues''][''high'']:\n            print(f''  - {issue}'')\n    print(f''\\n‚úÖ Phase 4: Environment & Security Hardening - COMPLETED'')\nexcept Exception as e:\n    print(f''‚ùå Security validation error: {e}'')\n\")",
      "mcp__serena__read_memory",
      "mcp__serena__list_memories",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\nimport asyncio\nfrom backend.app.utils.clerk_auth import clerk_health_check\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''‚úÖ Health check result: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(PYTHONPATH=. CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check, get_current_user_with_db_sync\nprint(''‚úÖ Clerk auth imports successful'')\nprint(f''Health check function: {clerk_health_check.__name__}'')\nprint(f''Auth function: {get_current_user_with_db_sync.__name__}'')\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''‚úÖ Health check result: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(PYTHONPATH=/Users/philippebeliveau/Desktop/Notebook/Orientor_project/Orientor_Platform_Clean/backend CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f python -c \"\n# Test 1: Import validation\nprint(''üß™ TEST 1: Import Validation'')\ntry:\n    from app.utils.clerk_auth import get_current_user_with_db_sync, clerk_health_check\n    print(''‚úÖ PASS: Clerk auth functions imported successfully'')\nexcept Exception as e:\n    print(f''‚ùå FAIL: Import failed: {e}'')\n\n# Test 2: Configuration validation\nprint(''\\nüß™ TEST 2: Configuration Validation'') \nimport os\nrequired_env = [''CLERK_SECRET_KEY'', ''NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY'', ''NEXT_PUBLIC_CLERK_DOMAIN'']\nmissing = []\nfor var in required_env:\n    if not os.getenv(var):\n        missing.append(var)\n\nif missing:\n    print(f''‚ùå FAIL: Missing environment variables: {missing}'')\nelse:\n    print(''‚úÖ PASS: All required environment variables present'')\n\n# Test 3: Function signature validation\nprint(''\\nüß™ TEST 3: Function Signature Validation'')\nimport inspect\nsig = inspect.signature(get_current_user_with_db_sync)\nparams = list(sig.parameters.keys())\nprint(f''Function parameters: {params}'')\nprint(''‚úÖ PASS: Function signature looks correct'')\n\")",
      "Bash(export PYTHONPATH=.)",
      "Bash(export SECRET_KEY=development-secret-key-change-in-production-12345678901234567890)",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__think_about_collected_information",
      "mcp__sequentialthinking__sequentialthinking",
      "Bash(PYTHONPATH=. python -c \"from app.utils.clerk_auth import get_current_user_with_db_sync; print(''‚úÖ Clerk auth function imported successfully'')\")",
      "Bash(timeout 30 npm run dev)",
      "mcp__sequentialthinking__sequentialthinking",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cnVsaW5nLWhhbGlidXQtODkuY2xlcmsuYWNjb3VudHMuZGV2JA NEXT_PUBLIC_CLERK_DOMAIN=ruling-halibut-89.clerk.accounts.dev python -c \"\nfrom app.utils.clerk_auth import fetch_clerk_jwks\nimport asyncio\n\nasync def test_jwks():\n    try:\n        result = await fetch_clerk_jwks()\n        print(f''‚úÖ JWKS fetch successful: {len(result.get(\"\"keys\"\", []))} keys'')\n        return True\n    except Exception as e:\n        print(f''‚ùå JWKS fetch failed: {e}'')\n        return False\n\nresult = asyncio.run(test_jwks())\nprint(f''Result: {result}'')\n\")",
      "Bash(mkdir:*)",
      "Bash(cat:*)",
      "Bash(echo $PYTHONPATH)",
      "Bash(env)",
      "Bash(cp:*)",
      "Bash(PYTHONPATH=. python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check\n\nasync def test_health():\n    result = await clerk_health_check()\n    print(f''‚úÖ Health check result from CURRENT backend: {result}'')\n\nasyncio.run(test_health())\n\")",
      "Bash(PYTHONPATH=. python -c \"import app.main; print(f''‚úÖ app.main loaded from: {app.main.__file__}'')\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(PYTHONPATH=. python run.py --help)",
      "Bash(timeout:*)",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cnVsaW5nLWhhbGlidXQtODkuY2xlcmsuYWNjb3VudHMuZGV2JA NEXT_PUBLIC_CLERK_DOMAIN=ruling-halibut-89.clerk.accounts.dev python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check, validate_clerk_jwt, fetch_clerk_jwks\n\nasync def test_auth_components():\n    print(''üß™ Testing Clerk Authentication Components...'')\n    \n    # Test health check\n    try:\n        health = await clerk_health_check()\n        print(f''‚úÖ Health Check: {health}'')\n    except Exception as e:\n        print(f''‚ùå Health Check Failed: {e}'')\n    \n    # Test JWKS fetch\n    try:\n        jwks = await fetch_clerk_jwks()\n        print(f''‚úÖ JWKS Fetch: Got {len(jwks.get(\"\"keys\"\", []))} keys'')\n    except Exception as e:\n        print(f''‚ùå JWKS Fetch Failed: {e}'')\n    \n    # Test JWT validation with dummy token\n    try:\n        result = await validate_clerk_jwt(''invalid_token'')\n        print(f''JWT Validation Result: {result}'')\n    except Exception as e:\n        print(f''‚ö†Ô∏è JWT Validation (expected to fail with invalid token): {type(e).__name__}'')\n\nasyncio.run(test_auth_components())\n\")",
      "Bash(CLERK_SECRET_KEY=sk_test_1cINwMnu5slBHCftWNHnKMelHORTylnlnFQvhzWO6f NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_cnVsaW5nLWhhbGlidXQtODkuY2xlcmsuYWNjb3VudHMuZGV2JA NEXT_PUBLIC_CLERK_DOMAIN=ruling-halibut-89.clerk.accounts.dev python -c \"\nimport asyncio\nfrom app.utils.clerk_auth import clerk_health_check\n\nasync def test_basic():\n    try:\n        result = await clerk_health_check()\n        print(f''‚úÖ Health check: {result}'')\n    except Exception as e:\n        print(f''‚ùå Health check error: {e}'')\n        print(f''Error type: {type(e).__name__}'')\n\nasyncio.run(test_basic())\n\")",
      "Bash(claude config get)",
      "Bash(claude config list)",
      "Bash(claude hooks get:*)",
      "Bash(claude hooks:*)",
      "Bash(claude config --help)",
      "Bash(claude config set:*)",
      "Bash(npx tsc:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "claude-flow",
    "ruv-swarm"
  ]
}